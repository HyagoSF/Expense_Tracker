{"version":3,"sources":["components/UI/Card.js","components/Expenses/ExpensesFilter.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpensesFilter","value","selected","onChange","event","onChangeFilter","target","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","useState","title","amount","ExpensesList","items","length","map","expense","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","prop","totalYear","dataPoints","reduce","a","b","dataPoint","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","filteredYear","setFilteredYear","filteredExpenses","filter","toString","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","max","onClick","onCancel","NewExpense","isEditing","setIsEditing","enteredExpenseData","random","onAddExpense","on","DUMMY_EXPENSES","App","setExpenses","prevExpenses","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d10b33f7.chunk.js","sourcesContent":["import './Card.css';\r\n\r\nconst Card = (props) => {\r\n\tconst classes = `card ${props.className}`;\r\n\treturn <div className={classes}>{props.children}</div>;\r\n\t// <div className=\"card expense-item\"></div>;\r\n\t// <div className=\"card expenses\"></div>;\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport './ExpensesFilter.css';\r\n\r\nconst ExpensesFilter = (props) => {\r\n\tconst dropdownChangeHandler = (event) => {\r\n\t\tprops.onChangeFilter(event.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"expenses-filter\">\r\n\t\t\t<div className=\"expenses-filter__control\">\r\n\t\t\t\t<label>Filter by year</label>\r\n\t\t\t\t<select value={props.selected} onChange={dropdownChangeHandler}>\r\n\t\t\t\t\t<option value=\"2022\">2022</option>\r\n\t\t\t\t\t<option value=\"2021\">2021</option>\r\n\t\t\t\t\t<option value=\"2020\">2020</option>\r\n\t\t\t\t\t<option value=\"2019\">2019</option>\r\n\t\t\t\t</select>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import './ExpenseDate.css';\r\n\r\nconst ExpenseDate = (props) => {\r\n\tconst month = props.date.toLocaleString('en-US', { month: 'long' });\r\n\tconst day = props.date.toLocaleString('en-US', { day: '2-digit' });\r\n\tconst year = props.date.getFullYear();\r\n\r\n\treturn (\r\n\t\t<div className=\"expense-date\">\r\n\t\t\t<div className=\"expense-date__month\">{month}</div>\r\n\t\t\t<div className=\"expense-date__year\">{year}</div>\r\n\t\t\t<div className=\"expense-date__day\">{day}</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ExpenseDate;\r\n","import { useState } from 'react';\r\nimport './ExpenseItem.css';\r\n\r\nimport Card from '../UI/Card';\r\nimport ExpenseDate from './ExpenseDate';\r\n\r\nconst ExpenseItem = (props) => {\r\n\t//hook to use state, to be able to turn it into another value and refresh the page\r\n\tconst [title, setTitle] = useState(props.title);\r\n\t//the first element is the current state value, and the second, is a FUNCTION for update that\r\n\r\n\treturn (\r\n\t\t//I have a Card where the props of it is className='expense-item'\r\n\t\t<li>\r\n\t\t\t<Card className=\"expense-item\">\r\n\t\t\t\t<ExpenseDate date={props.date} />\r\n\r\n\t\t\t\t<div className=\"expense-item__description\">\r\n\t\t\t\t\t<h2>{title}</h2>\r\n\t\t\t\t\t<div className=\"expense-item__price\">${props.amount}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</li>\r\n\t);\r\n};\r\n\r\nexport default ExpenseItem;\r\n","import './ExpensesList.css';\r\nimport ExpenseItem from './ExpenseItem';\r\n\r\nconst ExpensesList = (props) => {\r\n\t//1st way to do:\r\n\r\n\t// let expensesContent = (\r\n\t// \t<p className=\"expenses-list__fallback\">No expenses found.</p>\r\n\t// );\r\n\r\n\t// if (props.items.length > 0) {\r\n\t// expensesContent = props.items.map((expense) => (\r\n\t// \t<ExpenseItem\r\n\t// \t\tclassName=\"expenses-list\"\r\n\t// \t\tkey={expense.id} //key to identify each element, not to overlay data\r\n\t// \t\ttitle={expense.title}\r\n\t// \t\tamount={expense.amount}\r\n\t// \t\tdate={expense.date}\r\n\t// \t/>\r\n\t// ));\r\n\t// }\r\n\r\n\t// return expensesContent;\r\n\t// ------------------------------------------------------\r\n\t// 2nd way to do:\r\n\r\n\tif (props.items.length === 0) {\r\n\t\treturn <h2 className=\"expenses-list__fallback\">Found no expenses.</h2>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<ul className=\"expenses-list\">\r\n\t\t\t{props.items.map((expense) => (\r\n\t\t\t\t<ExpenseItem\r\n\t\t\t\t\tclassName=\"expenses-list\"\r\n\t\t\t\t\tkey={expense.id} //key to identify each element, not to overlay data\r\n\t\t\t\t\ttitle={expense.title}\r\n\t\t\t\t\tamount={expense.amount}\r\n\t\t\t\t\tdate={expense.date}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default ExpensesList;\r\n","import React from 'react';\r\n\r\nimport './ChartBar.css';\r\n\r\nconst ChartBar = (props) => {\r\n\tlet barFillHeight = '0%'; //as a text because will use as CSS\r\n\r\n\tif (props.maxValue > 0) {\r\n\t\tbarFillHeight = `${Math.round((props.value * 100) / props.maxValue)}%`; //function to get the integer value of how much to Fill\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"chart-bar\">\r\n\t\t\t<div className=\"chart-bar__inner\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName=\"chart-bar__fill\"\r\n\t\t\t\t\tstyle={{ height: barFillHeight }} //to use style I have to pass this into a new Object, and if I want to add a property which need a dash inside of it: background-color, I should put this inside quotes, OR use backgroundColor\r\n\t\t\t\t></div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"chart-bar__label\">{props.label}</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ChartBar;\r\n","import React from 'react';\r\nimport ChartBar from './ChartBar';\r\n\r\nimport './Chart.css';\r\n\r\nconst Chart = (props) => {\r\n\t// Max way of showing the expenses\r\n\t// const dataPointValues = props.dataPoints.map(\r\n\t// \t(dataPoint) => dataPoint.value\r\n\t// );\r\n\t// const totalMaximum = Math.max(...dataPointValues);\r\n\r\n\t// My way to show the expenses ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\r\n\t// let Sum = 0;\r\n\t// props.dataPoints.map((dataPoint) => {\r\n\t// \tSum += dataPoint.value;\r\n\t// });\r\n\tconst Sum = (items, prop) => {\r\n\t\treturn items.reduce((a, b) => {\r\n\t\t\treturn a + b[prop];\r\n\t\t}, 0);\r\n\t};\r\n\tconst totalYear = Sum(props.dataPoints, 'value');\r\n\r\n\treturn (\r\n\t\t<div className=\"chart\">\r\n\t\t\t{/* Expected this dataPoints to hold a value which is an array, then I can map them, and make each single dataPoint into a ChartBar */}\r\n\t\t\t{props.dataPoints.map((dataPoint) => (\r\n\t\t\t\t<ChartBar\r\n\t\t\t\t\tkey={dataPoint.label} //or .id\r\n\t\t\t\t\t// value={dataPoint.title}\r\n\t\t\t\t\tvalue={dataPoint.value}\r\n\t\t\t\t\t// maxValue={totalMaximum} // max way of showing\r\n\t\t\t\t\tmaxValue={totalYear} //my way of showing\r\n\t\t\t\t\tlabel={dataPoint.label}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\nimport Chart from '../Chart/Chart';\r\n\r\nconst ExpensesChart = (props) => {\r\n\tconst chartDataPoints = [\r\n\t\t{ label: 'Jan', value: 0 },\r\n\t\t{ label: 'Feb', value: 0 },\r\n\t\t{ label: 'Mar', value: 0 },\r\n\t\t{ label: 'Apr', value: 0 },\r\n\t\t{ label: 'May', value: 0 },\r\n\t\t{ label: 'Jun', value: 0 },\r\n\t\t{ label: 'Jul', value: 0 },\r\n\t\t{ label: 'Ago', value: 0 },\r\n\t\t{ label: 'Sep', value: 0 },\r\n\t\t{ label: 'Oct', value: 0 },\r\n\t\t{ label: 'Nov', value: 0 },\r\n\t\t{ label: 'Dec', value: 0 },\r\n\t];\r\n\r\n\t// for object of expenses i'm gonna get the month of it, and once I have this month, i'm gonna add the amount of it inside chartDataPoints for the specific month, using the index\r\n\tfor (const expense of props.expenses) {\r\n\t\tconst expenseMonth = expense.date.getMonth(); // starting at 0 => Jan; 1=> fev\r\n\t\tchartDataPoints[expenseMonth].value += expense.amount;\r\n\t\t// console.log(chartDataPoints);\r\n\t}\r\n\r\n\treturn <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpensesChart;\r\n","import React, { useState } from 'react';\r\n\r\nimport './Expenses.css';\r\nimport Card from '../UI/Card';\r\nimport ExpensesFilter from './ExpensesFilter';\r\nimport ExpensesList from './ExpensesList';\r\nimport ExpensesChart from './ExpensesChart';\r\n\r\nconst Expenses = (props) => {\r\n\tconst [filteredYear, setFilteredYear] = useState('2021');\r\n\r\n\tconst filterChangeHandler = (selectedYear) => {\r\n\t\tsetFilteredYear(selectedYear);\r\n\t};\r\n\r\n\tconst filteredExpenses = props.items.filter((expense) => {\r\n\t\treturn expense.date.getFullYear().toString() === filteredYear;\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Card className=\"expenses\">\r\n\t\t\t\t<ExpensesFilter\r\n\t\t\t\t\tselected={filteredYear}\r\n\t\t\t\t\tonChangeFilter={filterChangeHandler}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<ExpensesChart expenses={filteredExpenses} />\r\n\r\n\t\t\t\t<ExpensesList items={filteredExpenses} />\r\n\t\t\t</Card>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Expenses;\r\n","import React, { useState } from 'react';\r\nimport './ExpenseForm.css';\r\n\r\nconst ExpenseForm = (props) => {\r\n\t//using Multiple states\r\n\tconst [enteredTitle, setEnteredTitle] = useState('');\r\n\tconst [enteredAmount, setEnteredAmount] = useState('');\r\n\tconst [enteredDate, setEnteredDate] = useState('');\r\n\r\n\t// //using One state instead\r\n\t// const [userInput, setUserInput] = useState({\r\n\t// \tenteredTitle: '',\r\n\t// \tenteredAmount: '',\r\n\t// \tenteredDate: '',\r\n\t// });\r\n\r\n\tconst titleChangeHandler = (event) => {\r\n\t\tsetEnteredTitle(event.target.value);\r\n\t\t// // if I depend on the previous states, should use this function here, instead of the one above\r\n\t\t// setUserInput((prevState) => {\r\n\t\t// \treturn { ...prevState, enteredTitle: event.target.value };\r\n\t\t// });\r\n\t};\r\n\r\n\tconst amountChangeHandler = (event) => {\r\n\t\tsetEnteredAmount(event.target.value);\r\n\r\n\t\t// setUserInput((prevState) => {\r\n\t\t// \treturn { ...prevState, enteredAmount: event.target.value };\r\n\t\t// });\r\n\t};\r\n\r\n\tconst dateChangeHandler = (event) => {\r\n\t\tsetEnteredDate(event.target.value);\r\n\r\n\t\t// setUserInput((prevState) => {\r\n\t\t// \treturn { ...prevState, enteredDate: event.target.value };\r\n\t\t// });\r\n\t};\r\n\r\n\tconst submitHandler = (event) => {\r\n\t\tevent.preventDefault(); //prevents page to reload on submit\r\n\r\n\t\tconst expenseData = {\r\n\t\t\ttitle: enteredTitle,\r\n\t\t\tamount: +enteredAmount, //use the + to convert the input from a string to a number\r\n\t\t\tdate: new Date(enteredDate), //to transform date into a new Date object\r\n\t\t};\r\n\r\n\t\t//i'm passing the data got here from inputs into the function that I've made as props above in my parent called OnSaveExpenseData\r\n\t\tprops.onSaveExpenseData(expenseData);\r\n\r\n\t\t//to clear the inputs after submitted the form\r\n\t\tsetEnteredTitle('');\r\n\t\tsetEnteredAmount('');\r\n\t\tsetEnteredDate('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={submitHandler}>\r\n\t\t\t<div className=\"new-expense__controls\">\r\n\t\t\t\t<div className=\"new-expense__control\">\r\n\t\t\t\t\t<label>Title</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tvalue={enteredTitle}\r\n\t\t\t\t\t\tonChange={titleChangeHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"new-expense__control\">\r\n\t\t\t\t\t<label>Amount</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tmin=\"0.01\"\r\n\t\t\t\t\t\tstep=\"0.01\"\r\n\t\t\t\t\t\tvalue={enteredAmount}\r\n\t\t\t\t\t\tonChange={amountChangeHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"new-expense__control\">\r\n\t\t\t\t\t<label>Date</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"date\"\r\n\t\t\t\t\t\tmin=\"2019-01-01\"\r\n\t\t\t\t\t\tmax=\"2022-12-31\"\r\n\t\t\t\t\t\tvalue={enteredDate}\r\n\t\t\t\t\t\tonChange={dateChangeHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"new-expense__actions\">\r\n\t\t\t\t<button onClick={props.onCancel} type=\"button\">\r\n\t\t\t\t\tCancel\r\n\t\t\t\t</button>\r\n\t\t\t\t<button type=\"submit\">Add Expense</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React, { useState } from 'react';\r\nimport ExpenseForm from './ExpenseForm.js';\r\n\r\nimport './NewExpense.css';\r\n\r\nconst NewExpense = (props) => {\r\n\tconst [isEditing, setIsEditing] = useState(false);\r\n\r\n\tconst saveExpenseDataHandler = (enteredExpenseData) => {\r\n\t\tconst expenseData = {\r\n\t\t\t...enteredExpenseData,\r\n\t\t\tid: Math.random().toString(),\r\n\t\t};\r\n\t\t// console.log(ExpenseData);\r\n\t\tprops.onAddExpense(expenseData);\r\n\t\tsetIsEditing(false);\r\n\t};\r\n\r\n\tconst startEditingHandler = () => {\r\n\t\tsetIsEditing(true);\r\n\t};\r\n\r\n\tconst stopEditingHandler = () => {\r\n\t\tsetIsEditing(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"new-expense\">\r\n\t\t\t{/* BOTH BELOW METHODS WORKS WELL, JUST DIFFERENT SYNTAX */}\r\n\r\n\t\t\t{/* {!isEditing && (\r\n\t\t\t\t<button onClick={startEditingHandler}> Add New Expense</button>\r\n\t\t\t)}\r\n\t\t\t{isEditing && (\r\n\t\t\t\t<ExpenseForm\r\n\t\t\t\t\tonCancel={stopEditingHandler}\r\n\t\t\t\t\tonSaveExpenseData={saveExpenseDataHandler}\r\n\t\t\t\t\ton\r\n\t\t\t\t/>\r\n\t\t\t)} */}\r\n\r\n\t\t\t<div>\r\n\t\t\t\t{isEditing === false ? (\r\n\t\t\t\t\t<button onClick={startEditingHandler}>\r\n\t\t\t\t\t\tAdd New Expense\r\n\t\t\t\t\t</button>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<ExpenseForm\r\n\t\t\t\t\t\tonCancel={stopEditingHandler}\r\n\t\t\t\t\t\tonSaveExpenseData={saveExpenseDataHandler}\r\n\t\t\t\t\t\ton\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default NewExpense;\r\n","import { useState } from 'react';\r\nimport Expenses from './components/Expenses/Expenses';\r\nimport NewExpense from './components/NewExpense/NewExpense';\r\n\r\nconst DUMMY_EXPENSES = [\r\n\t{\r\n\t\tid: 'e1',\r\n\t\ttitle: 'Toilet Paper',\r\n\t\tamount: 94.12,\r\n\t\tdate: new Date(2020, 7, 14),\r\n\t},\r\n\t{\r\n\t\tid: 'e2',\r\n\t\ttitle: 'New MacBook',\r\n\t\tamount: 799.49,\r\n\t\tdate: new Date(2021, 2, 12),\r\n\t},\r\n\t{\r\n\t\tid: 'e3',\r\n\t\ttitle: 'Car Insurance',\r\n\t\tamount: 294.67,\r\n\t\tdate: new Date(2021, 2, 28),\r\n\t},\r\n\t{\r\n\t\tid: 'e4',\r\n\t\ttitle: 'New Desk (Wooden)',\r\n\t\tamount: 450,\r\n\t\tdate: new Date(2021, 5, 12),\r\n\t},\r\n];\r\n\r\nconst App = () => {\r\n\tconst [expenses, setExpenses] = useState(DUMMY_EXPENSES);\r\n\r\n\tconst addExpenseHandler = (expense) => {\r\n\t\tsetExpenses((prevExpenses) => {\r\n\t\t\treturn [expense, ...prevExpenses];\r\n\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<NewExpense onAddExpense={addExpenseHandler} />\r\n\t\t\t<Expenses items={expenses} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom/client';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(<App />);\r\n"],"sourceRoot":""}